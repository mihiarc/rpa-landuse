name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Install dependencies
      run: uv sync --all-extras --dev
      
    - name: Run safety check for known vulnerabilities
      run: |
        uv run safety check --json --output safety-report.json || true
        
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json
        
    - name: Run pip-audit for additional vulnerability scanning
      run: |
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  code-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Install dependencies
      run: uv sync --all-extras --dev
      
    - name: Run semgrep for additional code analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      continue-on-error: true
        
    - name: Check if SARIF file exists
      id: check_sarif
      run: |
        if [ -f semgrep.sarif ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ SARIF file not generated by semgrep"
        fi
        
    - name: Upload semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check_sarif.outputs.sarif_exists == 'true'
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

  license-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Install dependencies
      run: uv sync --all-extras --dev
      
    - name: Check licenses with pip-licenses
      run: |
        uv run pip-licenses --format=json --output-file=licenses-report.json
        uv run pip-licenses --format=plain-vertical --output-file=licenses-report.txt
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-reports
        path: |
          licenses-report.json
          licenses-report.txt
          
    - name: Check for incompatible licenses
      run: |
        # Check for GPL licenses that might conflict with MIT
        if uv run pip-licenses --format=json | jq -r '.[] | select(.License | contains("GPL")) | .Name' | grep -q .; then
          echo "⚠️ Warning: GPL licenses detected"
          uv run pip-licenses --format=json | jq -r '.[] | select(.License | contains("GPL")) | "\(.Name): \(.License)"'
        else
          echo "✅ No problematic licenses detected"
        fi

  security-summary:
    needs: [dependency-scan, code-scan, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Dependency scan results
        if [ -f safety-report/safety-report.json ]; then
          SAFETY_ISSUES=$(jq length safety-report/safety-report.json 2>/dev/null || echo "0")
          echo "- **Dependency vulnerabilities**: $SAFETY_ISSUES issues found" >> security-summary.md
        fi
        
        
        # License check results
        if [ -f license-reports/licenses-report.json ]; then
          TOTAL_DEPS=$(jq length license-reports/licenses-report.json 2>/dev/null || echo "0")
          echo "- **License compliance**: $TOTAL_DEPS dependencies checked" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review and address any high-severity security issues" >> security-summary.md
        echo "2. Update vulnerable dependencies to secure versions" >> security-summary.md
        echo "3. Ensure all secrets are properly managed and not committed" >> security-summary.md
        echo "4. Verify license compatibility with project requirements" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md